#!/bin/bash

# Matrix operations
# Author: Nathaniel Mohr
# This program allows the user to compute the dimensions and transpose of an array
#                                 find the average of each column of an array
#                                 add and multiply two matrices


# Checks errors in the arguments of functions which take one argument
oneArgCheck(){
  datafilepath="datafile$$"
  if [ "$#" = "0" ]
  then
    cat > "$datafilepath"
  elif [ "$#" = "1" ]
  then
      if [ ! -r "$1" ]
      then
        echo "Invalid file" >&2
        exit 1
      else
        datafilepath=$1
      fi
  else
    echo "Invalid number of arguments" >&2
    exit 1
  fi
}

# Checks errors in the arguments of functions which take two arguments
twoArgCheck(){
  if [ "$#" == "2" ]
  then
      if [ ! -r "$1" ]
      then
        echo "$1 is invalid" >&2
        exit 1
      elif [ ! -r "$2" ]
      then
        echo "$2 is invalid" >&2
        exit 1
      fi
  else
    echo "Invalid number of arguments" >&2
    exit 1
  fi
}

# Transposes a matrix and outputs to a file
transpose_op(){
  transpose_file="transpose_file$$"

  for ((i = 1; i <= $(wc -w <<< $(head -n 1 $1)); i++))
  do
     temp=$(cut -f $i $1)
     echo $temp | tr ' ' '\t' >> $transpose_file
  done
}

# Returns the dimension of a matrix: ROW COl
dims(){
  oneArgCheck "$@"
  row=$(wc -l < $datafilepath)    #rows are equal to the number of lines in the file
  col=$(wc -w <<< $(head -n 1 $datafilepath))     #columns are equal to the number of "words" in each line
  echo "$row $col"
}

# Reflect the elements of the matrix along the main diagonal
transpose(){
  oneArgCheck "$@"
  transpose_op $datafilepath
  cat $transpose_file
}

# Take an MxN matrix and return a 1xN row vector,
# where the first element is the mean of column one, the second mean of column two...
mean(){
  oneArgCheck "$@"
  mean_file="mean_file$$"

  transpose_op $datafilepath

  col=$(wc -l < $datafilepath)
  row=$(wc -w <<< $(head -n 1 $datafilepath))
  count=0

  # Sums up each row of the transpose and adds to an Nx1 matrix in a file
  while read line
  do
    sum=0
    mean=0

    # Summing up a single row of the transpose (column of original)
    for i in $line;
    do
      sum=$((sum+=i))
    done
    count=$((count+=1))

    # (a + (b/2)*( (a>0)*2-1 )) / b
    mean=$(( $(( $sum + $(( $(( $col / 2 )) * $(( $(( ($sum>0) * 2 )) - 1 )) )) )) / $col ))

    echo -n "$mean" >> $mean_file

    # Only adds tab if it is not the last number
    if [ $count -lt $row ]
    then echo -ne "\t" >> $mean_file
    fi
  done < $transpose_file

  echo -en "\n" >> $mean_file
  cat $mean_file
}

# Take two MxN matrices and add them together element-wise to produce an MxN matrix
# Error if the matrices do not have the same dimensions
add(){
  twoArgCheck "$@"
  sum_file="sum_file$$"

  # Checking that the dimensions are compatible
  #      rows of A         rows of B                 cols of A                      cols of B
  if [ $(wc -l < $1) != $(wc -l < $2) ] || [ $(wc -w <<< $(head -n 1 $1)) != $(wc -w <<< $(head -n 1 $2)) ]
  then
    echo "Dimensions are not the same" >&2
    exit 1
  else
    col=$(wc -w <<< $(head -n 1 $1))

    exec {leftfile}< "$1"
    exec {rightfile}< "$2"

    while read -u "$leftfile" left && read -u "$rightfile" right
    do
      # Creates arrays equal to the ith lines of each file/matrix
      temp1=($left)
      temp2=($right)
      count=0

      # Adds each element of the row
      for ((i = 0; i < col; i++))
      do
        count=$((count+=1))
        sum=$((${temp1[i]}+${temp2[i]}))
        echo -n $sum >> $sum_file

        # Only adds tab if it is not the last number
        if [ $count -lt $col ]
        then echo -ne "\t" >> $sum_file
        fi
      done
      echo -ne "\n" >> $sum_file
    done

    exec {leftfile}<&-
    exec {rightfile}<&-

    cat $sum_file
  fi
}

# Take an MxN and NxP matrix and produce an MxP matrix
multiply(){
  twoArgCheck "$@"
  mult_file="mult_file$$"

  if [ $(wc -w <<< $(head -n 1 $1)) != $(wc -l < $2) ]
  then
    echo "Dimensions are not compatible" >&2
    exit 1
  else
    col=$(wc -w <<< $(head -n 1 $1))
    colB_size=$(wc -w <<< $(head -n 1 $2))

    transpose_op $2

    # Iterates through the ith row of A and the jth col of B
    while read rowA
    do
      temp1=($rowA)
      count=0
      while read colB
      do
        temp2=($colB)
        sum=0

        # Computes row i dot col j
        for ((i = 0; i < $col; i++))
        do
            sum=$((sum+=$((${temp1[i]}*${temp2[i]}))))
        done
        echo -n $sum >> $mult_file
        count=$((count+=1))

        # Only adds a tab if it is not the last element in a row
        if [ $count -lt $colB_size ]
        then echo -ne "\t" >> $mult_file
        fi
      done < $transpose_file
      echo -ne "\n" >> $mult_file
    done < $1

    cat $mult_file
  fi
}

# Check that the entered function is a valid option
if [ $1 == "dims" ] || [ $1 == "transpose" ] || [ $1 == "mean" ] || [ $1 == "add" ] || [ $1 == "multiply" ]
  then
    # Call appropriate function with remaining arguments
    $1 "${@:2}"
    # Remove all files created
    rm -f *$$
else
  echo "Invalid option" >&2
  exit 1
fi
