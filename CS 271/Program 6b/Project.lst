Microsoft (R) Macro Assembler Version 14.16.27026.1	    03/16/19 12:17:57
*Combinations Calculator    (program6b.asm		     Page 1 - 1


				TITLE Combinations Calculator    (program6b.asm)

				; Author: Nathaniel Mohr
				; Course / Project ID   CS271              Date: 3/9/19
				; Description: This program will ask a student to calculate the number of combinations of r items taken from a set of n items
				;				The system generates random problems with n in [3,12] and r in [1,n]
				;				The system repeats until the student chooses to quit

				get_random_number MACRO low_limit, high_limit, variable
					push eax
					mov eax, high_limit
					sub eax, low_limit
					inc eax
					call RandomRange
					add eax, low_limit
					mov ebx, variable
					mov [ebx], eax
					pop eax
				ENDM

				my_write_string MACRO buffer
					push edx
					mov edx, OFFSET buffer
					call WriteString
					pop edx
				ENDM

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 00000003			N_LOWER_LIMIT = 3
 = 0000000C			N_UPPER_LIMIT = 12
 = 00000001			R_LOWER_LIMIT = 1
 = 00000014			BUFFER_SIZE = 20

 00000000			.data
 00000000 50 52 4F 47 52	intro			BYTE	"PROGRAM 6b		By: Nathaniel Mohr",10,13,0
	   41 4D 20 36 62
	   09 09 42 79 3A
	   20 4E 61 74 68
	   61 6E 69 65 6C
	   20 4D 6F 68 72
	   0A 0D 00
 00000021 2A 2A 45 43 3A	ec1				BYTE	"**EC: You may gain 1 additional point by numbering each problem and keeping score.",10,13
	   20 59 6F 75 20
	   6D 61 79 20 67
	   61 69 6E 20 31
	   20 61 64 64 69
	   74 69 6F 6E 61
	   6C 20 70 6F 69
	   6E 74 20 62 79
	   20 6E 75 6D 62
	   65 72 69 6E 67
	   20 65 61 63 68
	   20 70 72 6F 62
	   6C 65 6D 20 61
	   6E 64 20 6B 65
	   65 70 69 6E 67
	   20 73 63 6F 72
	   65 2E 0A 0D
 00000075  20 20 20 20 20					BYTE	"      When the student quits, report number right/wrong, etc.",10,13,10,13,0
	   20 57 68 65 6E
	   20 74 68 65 20
	   73 74 75 64 65
	   6E 74 20 71 75
	   69 74 73 2C 20
	   72 65 70 6F 72
	   74 20 6E 75 6D
	   62 65 72 20 72
	   69 67 68 74 2F
	   77 72 6F 6E 67
	   2C 20 65 74 63
	   2E 0A 0D 0A 0D
	   00
 000000B7 48 65 6C 6C 6F	greeting		BYTE	"Hello and welcome to the Combinations Calculator!",10,13,10,13,0
	   20 61 6E 64 20
	   77 65 6C 63 6F
	   6D 65 20 74 6F
	   20 74 68 65 20
	   43 6F 6D 62 69
	   6E 61 74 69 6F
	   6E 73 20 43 61
	   6C 63 75 6C 61
	   74 6F 72 21 0A
	   0D 0A 0D 00
 000000ED 49 27 6C 6C 20	instructions	BYTE	"I'll give you a combinations problem.",10,13
	   67 69 76 65 20
	   79 6F 75 20 61
	   20 63 6F 6D 62
	   69 6E 61 74 69
	   6F 6E 73 20 70
	   72 6F 62 6C 65
	   6D 2E 0A 0D
 00000114  59 6F 75 20 65					BYTE	"You enter your answer, and I'll let you know if you're right.",10,13,10,13,0
	   6E 74 65 72 20
	   79 6F 75 72 20
	   61 6E 73 77 65
	   72 2C 20 61 6E
	   64 20 49 27 6C
	   6C 20 6C 65 74
	   20 79 6F 75 20
	   6B 6E 6F 77 20
	   69 66 20 79 6F
	   75 27 72 65 20
	   72 69 67 68 74
	   2E 0A 0D 0A 0D
	   00
 00000156 48 6F 77 20 6D	prompt			BYTE	"How many ways can you choose? ",0
	   61 6E 79 20 77
	   61 79 73 20 63
	   61 6E 20 79 6F
	   75 20 63 68 6F
	   6F 73 65 3F 20
	   00

 00000175 50 72 6F 62 6C	problem			BYTE	"Problem #",0
	   65 6D 20 23 00
 0000017F 4E 75 6D 62 65	numbers_in_set	BYTE	"Number of elements in the set:   ",0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 69
	   6E 20 74 68 65
	   20 73 65 74 3A
	   20 20 20 00
 000001A1 4E 75 6D 62 65	numbers_to_choose	BYTE	"Number of elements to choose from the set:   ",0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 74
	   6F 20 63 68 6F
	   6F 73 65 20 66
	   72 6F 6D 20 74
	   68 65 20 73 65
	   74 3A 20 20 20
	   00

 000001CF 54 68 65 72 65	result1			BYTE	"There are  ",0
	   20 61 72 65 20
	   20 00
 000001DB 20 20 63 6F 6D	result2			BYTE	"  combinations of ",0
	   62 69 6E 61 74
	   69 6F 6E 73 20
	   6F 66 20 00
 000001EE 20 69 74 65 6D	result3			BYTE	" items from a set of ",0
	   73 20 66 72 6F
	   6D 20 61 20 73
	   65 74 20 6F 66
	   20 00

 00000204 59 6F 75 20 6E	incorrect		BYTE	"You need more practice.",10,13,10,13,0
	   65 65 64 20 6D
	   6F 72 65 20 70
	   72 61 63 74 69
	   63 65 2E 0A 0D
	   0A 0D 00
 00000220 59 6F 75 20 61	correct			BYTE	"You are correct!",10,13,10,13,0
	   72 65 20 63 6F
	   72 72 65 63 74
	   21 0A 0D 0A 0D
	   00

 00000235 59 45 53 00		yes				BYTE	"YES",0
 00000239 4E 4F 00		no				BYTE	"NO",0
 0000023C 57 6F 75 6C 64	more_questions	BYTE	"Would you like another problem? (Enter 'yes' or 'no') ",0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   61 6E 6F 74 68
	   65 72 20 70 72
	   6F 62 6C 65 6D
	   3F 20 28 45 6E
	   74 65 72 20 27
	   79 65 73 27 20
	   6F 72 20 27 6E
	   6F 27 29 20 00

 00000273 59 6F 75 20 61	stats1			BYTE	"You answered ",0
	   6E 73 77 65 72
	   65 64 20 00
 00000281 20 63 6F 72 72	stats2			BYTE	" correct out of a total of ",0
	   65 63 74 20 6F
	   75 74 20 6F 66
	   20 61 20 74 6F
	   74 61 6C 20 6F
	   66 20 00
 0000029D 20 71 75 65 73	stats3			BYTE	" questions.",10,13,10,13,0
	   74 69 6F 6E 73
	   2E 0A 0D 0A 0D
	   00

 000002AD 00000000		n_val			DWORD	?
 000002B1 00000000		r_val			DWORD	?
 000002B5 00000000		guess			DWORD	?
 000002B9 00000000		answer			DWORD	?

 000002BD  00000014 [		user_string		BYTE	BUFFER_SIZE DUP(0)
	    00
	   ]
 000002D1 00000000		user_str_lngth	DWORD	?

 000002D5 00000000		num_problems	DWORD	0
 000002D9 00000000		num_right		DWORD	0

 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E		call Randomize
 00000005  E8 00000084			call introduction

 0000000A			top:
 0000000A  68 000002D5 R		push OFFSET num_problems
 0000000F  68 000002AD R		push OFFSET n_val
 00000014  68 000002B1 R		push OFFSET r_val
 00000019  E8 000000A1			call show_problem

 0000001E  68 000002B5 R		push OFFSET guess
 00000023  E8 00000122			call get_user_guess

 00000028  FF 35 000002AD R		push n_val
 0000002E  FF 35 000002B1 R		push r_val
 00000034  68 000002B9 R		push OFFSET answer
 00000039  E8 000001B1			call combinations

 0000003E  68 000002D9 R		push OFFSET num_right
 00000043  FF 35 000002AD R		push n_val
 00000049  FF 35 000002B1 R		push r_val
 0000004F  FF 35 000002B5 R		push guess
 00000055  FF 35 000002B9 R		push answer
 0000005B  E8 000001E2			call show_results

 00000060  E8 00000254			call get_user_answer
					INVOKE Str_compare, ADDR user_string, ADDR yes
 00000065  68 00000235 R   *	    push   OFFSET yes
 0000006A  68 000002BD R   *	    push   OFFSET user_string
 0000006F  E8 00000000 E   *	    call   Str_compare
 00000074  74 94			je top

 00000076  FF 35 000002D5 R		push num_problems
 0000007C  FF 35 000002D9 R		push num_right
 00000082  E8 00000281			call print_stats
					exit
 00000087  6A 00	   *	    push   +000000000h
 00000089  E8 00000000 E   *	    call   ExitProcess
 0000008E			main ENDP

				; This procedure introduces the program
				; Receives: none
				; Returns: none
				; Pre-Conditions: none 
				; Registers changed: edx
 0000008E			introduction PROC
					my_write_string intro
 0000008E  52		     1		push edx
 0000008F  BA 00000000 R     1		mov edx, OFFSET intro
 00000094  E8 00000000 E     1		call WriteString
 00000099  5A		     1		pop edx
					my_write_string ec1
 0000009A  52		     1		push edx
 0000009B  BA 00000021 R     1		mov edx, OFFSET ec1
 000000A0  E8 00000000 E     1		call WriteString
 000000A5  5A		     1		pop edx
					my_write_string greeting
 000000A6  52		     1		push edx
 000000A7  BA 000000B7 R     1		mov edx, OFFSET greeting
 000000AC  E8 00000000 E     1		call WriteString
 000000B1  5A		     1		pop edx
					my_write_string instructions
 000000B2  52		     1		push edx
 000000B3  BA 000000ED R     1		mov edx, OFFSET instructions
 000000B8  E8 00000000 E     1		call WriteString
 000000BD  5A		     1		pop edx
 000000BE  C3				ret
 000000BF			introduction ENDP

				; This procedure creates and presents the problem
				; Receives: OFFSET of r_val, n_val, and num_problems
				; Returns: values of variables properly changed
				; Pre-Conditions: none
				; Registers changed: eax, ebx, ebp
 000000BF			show_problem PROC
 000000BF  55				push ebp
 000000C0  8B EC			mov ebp, esp

					get_random_number N_LOWER_LIMIT, N_UPPER_LIMIT, [ebp+12]
 000000C2  50		     1		push eax
 000000C3  B8 0000000C	     1		mov eax, N_UPPER_LIMIT
 000000C8  83 E8 03	     1		sub eax, N_LOWER_LIMIT
 000000CB  40		     1		inc eax
 000000CC  E8 00000000 E     1		call RandomRange
 000000D1  83 C0 03	     1		add eax, N_LOWER_LIMIT
 000000D4  8B 5D 0C	     1		mov ebx, [ebp+12]
 000000D7  89 03	     1		mov [ebx], eax
 000000D9  58		     1		pop eax
 000000DA  8B 45 0C			mov eax, [ebp+12]
					get_random_number R_LOWER_LIMIT, [eax], [ebp+8]
 000000DD  50		     1		push eax
 000000DE  8B 00	     1		mov eax, [eax]
 000000E0  83 E8 01	     1		sub eax, R_LOWER_LIMIT
 000000E3  40		     1		inc eax
 000000E4  E8 00000000 E     1		call RandomRange
 000000E9  83 C0 01	     1		add eax, R_LOWER_LIMIT
 000000EC  8B 5D 08	     1		mov ebx, [ebp+8]
 000000EF  89 03	     1		mov [ebx], eax
 000000F1  58		     1		pop eax

					my_write_string problem
 000000F2  52		     1		push edx
 000000F3  BA 00000175 R     1		mov edx, OFFSET problem
 000000F8  E8 00000000 E     1		call WriteString
 000000FD  5A		     1		pop edx
 000000FE  8B 5D 10			mov ebx, [ebp+16]
 00000101  8B 03			mov eax, [ebx]
 00000103  40				inc eax
 00000104  89 03			mov [ebx], eax
 00000106  E8 00000000 E		call WriteDec
 0000010B  E8 00000000 E		call CrLf

					my_write_string numbers_in_set
 00000110  52		     1		push edx
 00000111  BA 0000017F R     1		mov edx, OFFSET numbers_in_set
 00000116  E8 00000000 E     1		call WriteString
 0000011B  5A		     1		pop edx
 0000011C  8B 5D 0C			mov ebx, [ebp+12]
 0000011F  8B 03			mov eax, [ebx]
 00000121  E8 00000000 E		call WriteDec
 00000126  E8 00000000 E		call CrLf

					my_write_string numbers_to_choose
 0000012B  52		     1		push edx
 0000012C  BA 000001A1 R     1		mov edx, OFFSET numbers_to_choose
 00000131  E8 00000000 E     1		call WriteString
 00000136  5A		     1		pop edx
 00000137  8B 5D 08			mov ebx, [ebp+8]
 0000013A  8B 03			mov eax, [ebx]
 0000013C  E8 00000000 E		call WriteDec
 00000141  E8 00000000 E		call CrLf

 00000146  5D				pop ebp
 00000147  C2 000C			ret 12
 0000014A			show_problem ENDP

				; This procedure gets the user's guess
				; Receives: OFFSET of guess
				; Returns: value put in guess
				; Pre-Conditions: none
				; Registers changed: edx, ecx, eax, ebp
 0000014A			get_user_guess PROC
 0000014A  55				push ebp
 0000014B  8B EC			mov ebp, esp

 0000014D				getting_guess:
					my_write_string prompt
 0000014D  52		     1		push edx
 0000014E  BA 00000156 R     1		mov edx, OFFSET prompt
 00000153  E8 00000000 E     1		call WriteString
 00000158  5A		     1		pop edx
 00000159  BA 000002BD R		mov edx, OFFSET user_string
 0000015E  B9 00000014			mov ecx, BUFFER_SIZE
 00000163  E8 00000000 E		call ReadString
 00000168  E8 0000000F			call is_num
 0000016D  83 F8 00			cmp eax, 0
 00000170  74 DB			je getting_guess

 00000172  FF 75 08			push [ebp+8]
 00000175  E8 00000036			call string_to_int

 0000017A  5D				pop ebp
 0000017B  C3				ret
 0000017C			get_user_guess ENDP

				; This procedure determines if a string is an integer
				; Receives: none
				; Returns: 1 for yes, 0 for no
				; Pre-Conditions: none
				; Registers changed: edi, ecx, eax
 0000017C			is_num PROC
 0000017C  BF 000002BD R		mov edi, OFFSET user_string
					INVOKE Str_length, ADDR user_string
 00000181  68 000002BD R   *	    push   OFFSET user_string
 00000186  E8 00000000 E   *	    call   Str_length
 0000018B  8B C8			mov ecx, eax

 0000018D  B8 00000000			mov eax, 0

 00000192				looping:
 00000192  8A 07			mov al, [edi]
 00000194  3C 00			cmp al, 0
 00000196  74 17			je end_is_num
 00000198  3C 30			cmp al, '0'
 0000019A  72 0E			jb not_num
 0000019C  3C 39			cmp al, '9'
 0000019E  77 0A			ja not_num
 000001A0  B8 00000001			mov eax, 1

 000001A5  47				inc edi
 000001A6  E2 EA			loop looping
 000001A8  EB 05			jmp end_is_num

 000001AA				not_num:
 000001AA  B8 00000000			mov eax, 0

 000001AF				end_is_num:

 000001AF  C3				ret
 000001B0			is_num ENDP

				; This procedure converts a string into its integer equivalent
				; Receives: OFFSET of guess
				; Returns: value in guess
				; Pre-Conditions: string has an integer equivalence
				; Registers changed: ebp, ebx, eax, edi, ecx
 000001B0			string_to_int PROC
 000001B0  55				push ebp
 000001B1  8B EC			mov ebp, esp

 000001B3  8B 5D 08			mov ebx, [ebp+8]
 000001B6  B8 00000000			mov eax, 0
 000001BB  89 03			mov [ebx], eax

 000001BD  BF 000002BD R		mov edi, OFFSET user_string
					INVOKE Str_length, ADDR user_string
 000001C2  68 000002BD R   *	    push   OFFSET user_string
 000001C7  E8 00000000 E   *	    call   Str_length
 000001CC  8B C8			mov ecx, eax

 000001CE				looping:
 000001CE  8B 5D 08			mov ebx, [ebp+8]
 000001D1  8B 03			mov eax, [ebx]
 000001D3  BB 0000000A			mov ebx, 10
 000001D8  F7 E3			mul ebx
 000001DA  8B 5D 08			mov ebx, [ebp+8]
 000001DD  89 03			mov [ebx], eax
 000001DF  8A 07			mov al, [edi]
 000001E1  2C 30			sub al, 48
 000001E3  8B 5D 08			mov ebx, [ebp+8]
 000001E6  00 03			add [ebx], al
 000001E8  47				inc edi
 000001E9  E2 E3			loop looping

 000001EB  5D				pop ebp
 000001EC  C2 0004			ret 4
 000001EF			string_to_int ENDP

				; This procedure calculates a combination
				; Receives: n_val, r_val, and OFFSET of answer
				; Returns: value of combination into answer
				; Pre-Conditions: proper values of r_val and n_val
				; Registers changed: ebp, eax, ebx
 000001EF			combinations PROC	
 000001EF  55				push ebp
 000001F0  8B EC			mov ebp, esp

 000001F2  8B 45 10			mov eax, [ebp+16]
 000001F5  2B 45 0C			sub eax, [ebp+12]	
 000001F8  50				push eax
 000001F9  E8 00000022			call factorial		; (n-r)!
 000001FE  8B D8			mov ebx, eax

 00000200  FF 75 0C			push [ebp+12]
 00000203  E8 00000018			call factorial		; r!

 00000208  F7 E3			mul ebx
 0000020A  8B D8			mov ebx, eax		; r!(n-r)!

 0000020C  FF 75 10			push [ebp+16]
 0000020F  E8 0000000C			call factorial		; n!

 00000214  99				cdq
 00000215  F7 F3			div ebx				; nCr

 00000217  8B 5D 08			mov ebx, [ebp+8]
 0000021A  89 03			mov [ebx], eax

 0000021C  5D				pop ebp
 0000021D  C2 000C			ret 12
 00000220			combinations ENDP

				; This procedure calculates factorial recursively
				; Receives: value to be calculated
				; Returns: factorial of value
				; Pre-Conditions: none
				; Registers changed: ebp, eax, esi
 00000220			factorial PROC
 00000220  55				push ebp
 00000221  8B EC			mov ebp, esp

 00000223  8B 45 08			mov eax, [ebp+8]
 00000226  83 F8 00			cmp eax, 0
 00000229  7F 07			jg recurse
 0000022B  B8 00000001			mov eax, 1
 00000230  7E 0C			jle quit

 00000232			recurse:
 00000232  48				dec eax
 00000233  50				push eax
 00000234  E8 FFFFFFE7			call factorial
					
 00000239  8B 75 08			mov esi, [ebp+8]
 0000023C  F7 E6			mul esi
 0000023E			quit:
 0000023E  5D				pop ebp
 0000023F  C2 0004			ret 4
 00000242			factorial ENDP

				; This procedure prints out the results
				; Receives: n_val, r_val, answer, guess, OFFSET of num_right
				; Returns: num_right changed to reflect results and printed out all results
				; Pre-Conditions: none
				; Registers changed: ebp, edx, eax, ebx
 00000242			show_results PROC 
 00000242  55				push ebp
 00000243  8B EC			mov ebp, esp

 00000245  E8 00000000 E		call CrLf
					my_write_string result1
 0000024A  52		     1		push edx
 0000024B  BA 000001CF R     1		mov edx, OFFSET result1
 00000250  E8 00000000 E     1		call WriteString
 00000255  5A		     1		pop edx
 00000256  8B 45 08			mov eax, [ebp+8]
 00000259  E8 00000000 E		call WriteDec
					my_write_string result2
 0000025E  52		     1		push edx
 0000025F  BA 000001DB R     1		mov edx, OFFSET result2
 00000264  E8 00000000 E     1		call WriteString
 00000269  5A		     1		pop edx
 0000026A  8B 45 10			mov eax, [ebp+16]
 0000026D  E8 00000000 E		call WriteDec
					my_write_string result3
 00000272  52		     1		push edx
 00000273  BA 000001EE R     1		mov edx, OFFSET result3
 00000278  E8 00000000 E     1		call WriteString
 0000027D  5A		     1		pop edx
 0000027E  8B 45 14			mov eax, [ebp+20]
 00000281  E8 00000000 E		call WriteDec
 00000286  E8 00000000 E		call CrLf

 0000028B  8B 45 08			mov eax, [ebp+8]
 0000028E  3B 45 0C			cmp eax, [ebp+12]
 00000291  74 0E			je correct_guess

 00000293			incorrect_guess:
					my_write_string incorrect
 00000293  52		     1		push edx
 00000294  BA 00000204 R     1		mov edx, OFFSET incorrect
 00000299  E8 00000000 E     1		call WriteString
 0000029E  5A		     1		pop edx
 0000029F  EB 14			jmp finish
 000002A1			correct_guess:
					my_write_string correct
 000002A1  52		     1		push edx
 000002A2  BA 00000220 R     1		mov edx, OFFSET correct
 000002A7  E8 00000000 E     1		call WriteString
 000002AC  5A		     1		pop edx
 000002AD  8B 5D 18			mov ebx, [ebp+24]
 000002B0  8B 03			mov eax, [ebx]
 000002B2  40				inc eax
 000002B3  89 03			mov [ebx], eax
 000002B5			finish:
 000002B5  5D				pop ebp
 000002B6  C2 0014			ret 20
 000002B9			show_results ENDP

				; This procedure determines if the user wants to get another question
				; Receives: none
				; Returns: "yes" or "no" in user_string
				; Pre-Conditions: none
				; Registers changed: edx, ecx, eax
 000002B9			get_user_answer PROC
 000002B9				getting_answer:
					my_write_string more_questions
 000002B9  52		     1		push edx
 000002BA  BA 0000023C R     1		mov edx, OFFSET more_questions
 000002BF  E8 00000000 E     1		call WriteString
 000002C4  5A		     1		pop edx
 000002C5  BA 000002BD R		mov edx, OFFSET user_string
 000002CA  B9 00000014			mov ecx, BUFFER_SIZE
 000002CF  E8 00000000 E		call ReadString
					INVOKE Str_ucase, ADDR user_string
 000002D4  68 000002BD R   *	    push   OFFSET user_string
 000002D9  E8 00000000 E   *	    call   Str_ucase
					INVOKE Str_compare, ADDR user_string, ADDR yes
 000002DE  68 00000235 R   *	    push   OFFSET yes
 000002E3  68 000002BD R   *	    push   OFFSET user_string
 000002E8  E8 00000000 E   *	    call   Str_compare
 000002ED  74 13			je bottom
					INVOKE Str_compare, ADDR user_string, ADDR no
 000002EF  68 00000239 R   *	    push   OFFSET no
 000002F4  68 000002BD R   *	    push   OFFSET user_string
 000002F9  E8 00000000 E   *	    call   Str_compare
 000002FE  74 02			je bottom
 00000300  EB B7			jmp getting_answer
 00000302				bottom:
 00000302  E8 00000000 E		call CrLf
 00000307  C3				ret
 00000308			get_user_answer ENDP

				; This procedure prints the ratio of correct and incorrect answers
				; Receives: num_right and num_problems
				; Returns: stats printed to screen
				; Pre-Conditions: none
				; Registers changed: ebp, eax
 00000308			print_stats PROC 
 00000308  55				push ebp
 00000309  8B EC			mov ebp, esp

					my_write_string stats1
 0000030B  52		     1		push edx
 0000030C  BA 00000273 R     1		mov edx, OFFSET stats1
 00000311  E8 00000000 E     1		call WriteString
 00000316  5A		     1		pop edx
 00000317  8B 45 08			mov eax, [ebp+8]
 0000031A  E8 00000000 E		call WriteDec
					my_write_string stats2
 0000031F  52		     1		push edx
 00000320  BA 00000281 R     1		mov edx, OFFSET stats2
 00000325  E8 00000000 E     1		call WriteString
 0000032A  5A		     1		pop edx
 0000032B  8B 45 0C			mov eax, [ebp+12]
 0000032E  E8 00000000 E		call WriteDec
					my_write_string stats3
 00000333  52		     1		push edx
 00000334  BA 0000029D R     1		mov edx, OFFSET stats3
 00000339  E8 00000000 E     1		call WriteString
 0000033E  5A		     1		pop edx

 0000033F  5D				pop ebp
 00000340  C2 0008			ret 8
 00000343			print_stats ENDP
				END main
Microsoft (R) Macro Assembler Version 14.16.27026.1	    03/16/19 12:17:57
*Combinations Calculator    (program6b.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

get_random_number  . . . . . . .	Proc
my_write_string  . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002DD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000343 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
combinations . . . . . . . . . .	P Near	 000001EF _TEXT	Length= 00000031 Public STDCALL
factorial  . . . . . . . . . . .	P Near	 00000220 _TEXT	Length= 00000022 Public STDCALL
  recurse  . . . . . . . . . . .	L Near	 00000232 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 0000023E _TEXT	
get_user_answer  . . . . . . . .	P Near	 000002B9 _TEXT	Length= 0000004F Public STDCALL
  getting_answer . . . . . . . .	L Near	 000002B9 _TEXT	
  bottom . . . . . . . . . . . .	L Near	 00000302 _TEXT	
get_user_guess . . . . . . . . .	P Near	 0000014A _TEXT	Length= 00000032 Public STDCALL
  getting_guess  . . . . . . . .	L Near	 0000014D _TEXT	
introduction . . . . . . . . . .	P Near	 0000008E _TEXT	Length= 00000031 Public STDCALL
is_num . . . . . . . . . . . . .	P Near	 0000017C _TEXT	Length= 00000034 Public STDCALL
  looping  . . . . . . . . . . .	L Near	 00000192 _TEXT	
  not_num  . . . . . . . . . . .	L Near	 000001AA _TEXT	
  end_is_num . . . . . . . . . .	L Near	 000001AF _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000008E Public STDCALL
  top  . . . . . . . . . . . . .	L Near	 0000000A _TEXT	
print_stats  . . . . . . . . . .	P Near	 00000308 _TEXT	Length= 0000003B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
show_problem . . . . . . . . . .	P Near	 000000BF _TEXT	Length= 0000008B Public STDCALL
show_results . . . . . . . . . .	P Near	 00000242 _TEXT	Length= 00000077 Public STDCALL
  incorrect_guess  . . . . . . .	L Near	 00000293 _TEXT	
  correct_guess  . . . . . . . .	L Near	 000002A1 _TEXT	
  finish . . . . . . . . . . . .	L Near	 000002B5 _TEXT	
string_to_int  . . . . . . . . .	P Near	 000001B0 _TEXT	Length= 0000003F Public STDCALL
  looping  . . . . . . . . . . .	L Near	 000001CE _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00000014h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
N_LOWER_LIMIT  . . . . . . . . .	Number	 00000003h   
N_UPPER_LIMIT  . . . . . . . . .	Number	 0000000Ch   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
R_LOWER_LIMIT  . . . . . . . . .	Number	 00000001h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
answer . . . . . . . . . . . . .	DWord	 000002B9 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
correct  . . . . . . . . . . . .	Byte	 00000220 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
ec1  . . . . . . . . . . . . . .	Byte	 00000021 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 000000B7 _DATA	
guess  . . . . . . . . . . . . .	DWord	 000002B5 _DATA	
incorrect  . . . . . . . . . . .	Byte	 00000204 _DATA	
instructions . . . . . . . . . .	Byte	 000000ED _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
more_questions . . . . . . . . .	Byte	 0000023C _DATA	
n_val  . . . . . . . . . . . . .	DWord	 000002AD _DATA	
no . . . . . . . . . . . . . . .	Byte	 00000239 _DATA	
num_problems . . . . . . . . . .	DWord	 000002D5 _DATA	
num_right  . . . . . . . . . . .	DWord	 000002D9 _DATA	
numbers_in_set . . . . . . . . .	Byte	 0000017F _DATA	
numbers_to_choose  . . . . . . .	Byte	 000001A1 _DATA	
problem  . . . . . . . . . . . .	Byte	 00000175 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000156 _DATA	
r_val  . . . . . . . . . . . . .	DWord	 000002B1 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
result1  . . . . . . . . . . . .	Byte	 000001CF _DATA	
result2  . . . . . . . . . . . .	Byte	 000001DB _DATA	
result3  . . . . . . . . . . . .	Byte	 000001EE _DATA	
stats1 . . . . . . . . . . . . .	Byte	 00000273 _DATA	
stats2 . . . . . . . . . . . . .	Byte	 00000281 _DATA	
stats3 . . . . . . . . . . . . .	Byte	 0000029D _DATA	
user_str_lngth . . . . . . . . .	DWord	 000002D1 _DATA	
user_string  . . . . . . . . . .	Byte	 000002BD _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
yes  . . . . . . . . . . . . . .	Byte	 00000235 _DATA	

	   0 Warnings
	   0 Errors
