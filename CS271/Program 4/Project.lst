Microsoft (R) Macro Assembler Version 14.16.27026.1	    02/17/19 13:20:06
$Composite Numbers     (program4.asm			     Page 1 - 1


				TITLE Composite Numbers     (program4.asm)

				; Author: Nathaniel Mohr
				; Course / Project ID   CS271              Date: 2/15/19
				; Description: This program will calculate composite numbers based on a user entered number from 1-400
				;				The numbers will be displayed 10 per line with at least 3 spaces between the numbers

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 00000190			UPPER_LIMIT = 400
 = 0000000A			LINE_LIMIT = 10
 = 00000003			MAX_NUM_LENGTH = 3
 = 00000003			MIN_SPACES = 3

 00000000			.data

 00000000 50 52 4F 47 52	intro			BYTE	"PROGRAM 4		By: Nathaniel Mohr",10,13,0
	   41 4D 20 34 09
	   09 42 79 3A 20
	   4E 61 74 68 61
	   6E 69 65 6C 20
	   4D 6F 68 72 0A
	   0D 00
 00000020 2A 2A 45 43 3A	ec1				BYTE	"**EC: Align the output columns.",10,13,10,13,0
	   20 41 6C 69 67
	   6E 20 74 68 65
	   20 6F 75 74 70
	   75 74 20 63 6F
	   6C 75 6D 6E 73
	   2E 0A 0D 0A 0D
	   00
 00000044 48 65 6C 6C 6F	greeting		BYTE	"Hello and welcome to the Composite Number Generator!",10,13,10,13,0
	   20 61 6E 64 20
	   77 65 6C 63 6F
	   6D 65 20 74 6F
	   20 74 68 65 20
	   43 6F 6D 70 6F
	   73 69 74 65 20
	   4E 75 6D 62 65
	   72 20 47 65 6E
	   65 72 61 74 6F
	   72 21 0A 0D 0A
	   0D 00
 0000007D 45 6E 74 65 72	instructions	BYTE	"Enter a number between 0 and ",0
	   20 61 20 6E 75
	   6D 62 65 72 20
	   62 65 74 77 65
	   65 6E 20 30 20
	   61 6E 64 20 00
 0000009B 20 66 6F 72 20	instructions2	BYTE	" for the number of composite numbers you would like to see: ",0
	   74 68 65 20 6E
	   75 6D 62 65 72
	   20 6F 66 20 63
	   6F 6D 70 6F 73
	   69 74 65 20 6E
	   75 6D 62 65 72
	   73 20 79 6F 75
	   20 77 6F 75 6C
	   64 20 6C 69 6B
	   65 20 74 6F 20
	   73 65 65 3A 20
	   00
 000000D8 09 09 53 6F 72	out_of_range	BYTE	"		Sorry. '",0
	   72 79 2E 20 27
	   00
 000000E3 27 20 69 73 20	out_of_range2	BYTE	"' is not within the range. Try again.",10,13,0
	   6E 6F 74 20 77
	   69 74 68 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   2E 20 54 72 79
	   20 61 67 61 69
	   6E 2E 0A 0D 00
 0000010B 20 00			space			BYTE	" ",0
 0000010D 54 68 61 6E 6B	farewell_msg	BYTE	"Thank you for using the Composite Number Generator",0
	   20 79 6F 75 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   74 68 65 20 43
	   6F 6D 70 6F 73
	   69 74 65 20 4E
	   75 6D 62 65 72
	   20 47 65 6E 65
	   72 61 74 6F 72
	   00
 00000140 00000000		user_num		DWORD	?
 00000144 00000004		curr_num		DWORD	4
 00000148 00000000		divisor			DWORD	?
 0000014C 00000000		quotient		DWORD	?
 00000150 00000000		counter			DWORD	0
 00000154 00000000		temp			DWORD	?
 00000158 00000000		num_length		DWORD	?

 00000000			.code
 00000000			main PROC

 00000000  E8 00000016			call introduction
 00000005  E8 00000030			call get_user_data
 0000000A  E8 0000009A			call show_composites
 0000000F  E8 00000185			call farewell

					exit	; exit to operating system
 00000014  6A 00	   *	    push   +000000000h
 00000016  E8 00000000 E   *	    call   ExitProcess
 0000001B			main ENDP

				; Procedure to introduce the program
				; Receives: none
				; Returns: none
				; Preconditions: none
				; Registers changed: edx
 0000001B			introduction PROC
 0000001B  BA 00000000 R		mov edx, OFFSET intro
 00000020  E8 00000000 E		call WriteString
 00000025  BA 00000020 R		mov edx, OFFSET ec1
 0000002A  E8 00000000 E		call WriteString
 0000002F  BA 00000044 R		mov edx, OFFSET greeting
 00000034  E8 00000000 E		call WriteString
 00000039  C3				ret
 0000003A			introduction ENDP

				; Procedure to get how many numbers wanted by the user (user_num)
				; Receives: none
				; Returns: value for user_num that is between 1 and UPPER_LIMIT
				; Preconditions: none
				; Registers changed: edx, eax
 0000003A			get_user_data PROC
 0000003A				getting_data:
 0000003A  BA 0000007D R		mov edx, OFFSET instructions
 0000003F  E8 00000000 E		call WriteString
 00000044  B8 00000190			mov eax, UPPER_LIMIT
 00000049  E8 00000000 E		call WriteDec
 0000004E  BA 0000009B R		mov edx, OFFSET instructions2
 00000053  E8 00000000 E		call WriteString
 00000058  E8 00000000 E		call ReadInt
 0000005D  A3 00000140 R		mov user_num, eax
 00000062  E8 00000006			call validate
 00000067  83 F8 00			cmp eax, 0
 0000006A  74 CE			je getting_data
 0000006C  C3				ret
 0000006D			get_user_data ENDP

				; Procedure to determine if user_num is between 1 and UPPER_LIMIT
				; Receives: value in user_num
				; Returns: 1 for a valid number and 0 for not valid
				; Preconditions: none
				; Registers changed: eax, edx
 0000006D			validate PROC
 0000006D  A1 00000140 R		mov eax, user_num
 00000072  83 F8 01			cmp eax, 1
 00000075  7C 0E			jl not_valid
 00000077  3D 00000190			cmp eax, UPPER_LIMIT
 0000007C  7F 07			jg not_valid
 0000007E  B8 00000001			mov eax, 1
 00000083  EB 23			jmp valid

 00000085				not_valid:
 00000085  BA 000000D8 R		mov edx, OFFSET out_of_range
 0000008A  E8 00000000 E		call WriteString
 0000008F  E8 00000000 E		call WriteInt
 00000094  BA 000000E3 R		mov edx, OFFSET out_of_range2
 00000099  E8 00000000 E		call WriteString
 0000009E  E8 00000000 E		call CrLf
 000000A3  B8 00000000			mov eax, 0

 000000A8				valid:
 000000A8  C3				ret
 000000A9			validate ENDP

				; Procedure to print out the desired number of composite numbers
				; Receives: user_num as global variable
				; Returns: user_num number of composite numbers
				; Preconditions: user_num is valid
				; Registers changed: eax, ecx
 000000A9			show_composites PROC
 000000A9  8B 0D 00000140 R		mov ecx, user_num
 000000AF				composite_printing:
 000000AF  E8 0000001D			call is_composite
 000000B4  83 F8 00			cmp eax, 0
 000000B7  74 05			je not_print
 000000B9  E8 0000005D			call print_composite

 000000BE				not_print:
 000000BE  A1 00000144 R		mov eax, curr_num
 000000C3  40				inc eax
 000000C4  A3 00000144 R		mov curr_num, eax
 000000C9  E2 E4			loop composite_printing
 000000CB  E8 00000000 E		call CrLf
 000000D0  C3				ret
 000000D1			show_composites ENDP

				; Procedure to check if a number is a composite number
				; Receives: curr_num is a global variable
				; Returns: 1 if curr_num is composite and 0 if not composite
				; Preconditions: user_num is valid
				; Registers changed: eax, ebx, ecx
 000000D1			is_composite PROC
 000000D1  C7 05 00000148 R		mov divisor, 2
	   00000002
 000000DB				composite_loop:
 000000DB  A1 00000144 R		mov eax, curr_num
 000000E0  8B 1D 00000148 R		mov ebx, divisor
 000000E6  99				cdq
 000000E7  F7 F3			div ebx
 000000E9  83 FA 00			cmp edx, 0
 000000EC  74 1F			je prime_factor
 000000EE  A3 0000014C R		mov quotient, eax
 000000F3  A1 00000148 R		mov eax, divisor
 000000F8  40				inc eax
 000000F9  A3 00000148 R		mov divisor, eax
 000000FE  A1 0000014C R		mov eax, quotient
 00000103  3B 05 00000148 R		cmp eax, divisor
 00000109  7D D0			jge composite_loop
 0000010B  EB 07			jmp not_composite

 0000010D				prime_factor:
 0000010D  B8 00000001			mov eax, 1
 00000112  EB 06			jmp end_composite_check

 00000114				not_composite:
 00000114  B8 00000000			mov eax, 0
 00000119  41				inc ecx

 0000011A				end_composite_check:
 0000011A  C3				ret
 0000011B			is_composite ENDP

				; Procedure to print out a number and determine if a new line is needed
				; Receives: curr_num is a global variable
				; Returns: curr_num printed and appropriate new line added
				; Preconditions: curr_num is a composite number
				; Registers changed: eax, ebx, ecx, edx
 0000011B			print_composite PROC
 0000011B  A1 00000144 R		mov eax, curr_num
 00000120  E8 00000000 E		call WriteDec
 00000125  E8 00000020			call spacing_procedure

 0000012A  A1 00000150 R		mov eax, counter
 0000012F  40				inc eax
 00000130  A3 00000150 R		mov counter, eax
 00000135  99				cdq
 00000136  BB 0000000A			mov ebx, LINE_LIMIT
 0000013B  F7 F3			div ebx
 0000013D  8B C2			mov eax, edx
 0000013F  83 F8 00			cmp eax, 0
 00000142  75 05			jne no_new_line
 00000144  E8 00000000 E		call CrLf
 00000149				no_new_line:
 00000149  C3				ret
 0000014A			print_composite ENDP

				; Procedure to determine how many spaces are printed after a number
				; Receives: curr_num in eax
				; Returns: spaces printed after a number
				; Preconditions: user_num is valid and in eax register
				; Registers changed: eax, ebx, ecx, edx
 0000014A			spacing_procedure PROC
					; calculating the length of the number (how many digits)
 0000014A				while_loop:
 0000014A  83 F8 00			cmp eax, 0
 0000014D  74 1F			je out_of_while
 0000014F  A3 00000154 R		mov temp, eax
 00000154  A1 00000158 R		mov eax, num_length
 00000159  40				inc eax
 0000015A  A3 00000158 R		mov num_length, eax
 0000015F  A1 00000154 R		mov eax, temp
 00000164  BB 0000000A			mov ebx, 10
 00000169  99				cdq
 0000016A  F7 F3			div ebx
 0000016C  EB DC			jmp while_loop

					; adding (MAX_NUM_LENGTH + MIN_SPACES) minus the length of the number spaces
 0000016E				out_of_while:
 0000016E  B8 00000003			mov eax, MAX_NUM_LENGTH
 00000173  83 C0 03			add eax, MIN_SPACES
 00000176  2B 05 00000158 R		sub eax, num_length
					
 0000017C				space_printing:
 0000017C  83 F8 00			cmp eax, 0
 0000017F  7E 0D			jle out_of_spacing
 00000181  BA 0000010B R		mov edx, OFFSET space
 00000186  E8 00000000 E		call WriteString
 0000018B  48				dec eax
 0000018C  EB EE			jmp space_printing

 0000018E				out_of_spacing:

					; resetting the length variable
 0000018E  C7 05 00000158 R		mov num_length, 0
	   00000000
 00000198  C3				ret
 00000199			spacing_procedure ENDP

				; Procedure to close out the program
				; Receives: none
				; Returns: none
				; Preconditions: none
				; Registers changed: edx
 00000199			farewell PROC
 00000199  BA 0000010D R		mov edx, OFFSET farewell_msg
 0000019E  E8 00000000 E		call WriteString
 000001A3  E8 00000000 E		call CrLf
 000001A8  C3				ret
 000001A9			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.16.27026.1	    02/17/19 13:20:06
$Composite Numbers     (program4.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000015C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001A9 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 00000199 _TEXT	Length= 00000010 Public STDCALL
get_user_data  . . . . . . . . .	P Near	 0000003A _TEXT	Length= 00000033 Public STDCALL
  getting_data . . . . . . . . .	L Near	 0000003A _TEXT	
introduction . . . . . . . . . .	P Near	 0000001B _TEXT	Length= 0000001F Public STDCALL
is_composite . . . . . . . . . .	P Near	 000000D1 _TEXT	Length= 0000004A Public STDCALL
  composite_loop . . . . . . . .	L Near	 000000DB _TEXT	
  prime_factor . . . . . . . . .	L Near	 0000010D _TEXT	
  not_composite  . . . . . . . .	L Near	 00000114 _TEXT	
  end_composite_check  . . . . .	L Near	 0000011A _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001B Public STDCALL
print_composite  . . . . . . . .	P Near	 0000011B _TEXT	Length= 0000002F Public STDCALL
  no_new_line  . . . . . . . . .	L Near	 00000149 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
show_composites  . . . . . . . .	P Near	 000000A9 _TEXT	Length= 00000028 Public STDCALL
  composite_printing . . . . . .	L Near	 000000AF _TEXT	
  not_print  . . . . . . . . . .	L Near	 000000BE _TEXT	
spacing_procedure  . . . . . . .	P Near	 0000014A _TEXT	Length= 0000004F Public STDCALL
  while_loop . . . . . . . . . .	L Near	 0000014A _TEXT	
  out_of_while . . . . . . . . .	L Near	 0000016E _TEXT	
  space_printing . . . . . . . .	L Near	 0000017C _TEXT	
  out_of_spacing . . . . . . . .	L Near	 0000018E _TEXT	
validate . . . . . . . . . . . .	P Near	 0000006D _TEXT	Length= 0000003C Public STDCALL
  not_valid  . . . . . . . . . .	L Near	 00000085 _TEXT	
  valid  . . . . . . . . . . . .	L Near	 000000A8 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LINE_LIMIT . . . . . . . . . . .	Number	 0000000Ah   
MAX_NUM_LENGTH . . . . . . . . .	Number	 00000003h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN_SPACES . . . . . . . . . . .	Number	 00000003h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPER_LIMIT  . . . . . . . . . .	Number	 00000190h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
counter  . . . . . . . . . . . .	DWord	 00000150 _DATA	
curr_num . . . . . . . . . . . .	DWord	 00000144 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
divisor  . . . . . . . . . . . .	DWord	 00000148 _DATA	
ec1  . . . . . . . . . . . . . .	Byte	 00000020 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell_msg . . . . . . . . . .	Byte	 0000010D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000044 _DATA	
instructions2  . . . . . . . . .	Byte	 0000009B _DATA	
instructions . . . . . . . . . .	Byte	 0000007D _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_length . . . . . . . . . . .	DWord	 00000158 _DATA	
out_of_range2  . . . . . . . . .	Byte	 000000E3 _DATA	
out_of_range . . . . . . . . . .	Byte	 000000D8 _DATA	
quotient . . . . . . . . . . . .	DWord	 0000014C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 0000010B _DATA	
temp . . . . . . . . . . . . . .	DWord	 00000154 _DATA	
user_num . . . . . . . . . . . .	DWord	 00000140 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
